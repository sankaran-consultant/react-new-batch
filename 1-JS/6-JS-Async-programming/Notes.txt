




-----------------------------------------------------------------
.js-lang

    - all IO operations by default non-blocking
    - single-thread process , can execute concurrent action while IO happening

-----------------------------------------------------------------


 browser e.g chrome


    1. Javascript Engine/Runtime  ( v8 )   ==> based on ECMAScript spec

         a. single-call-stack   --> to execute function/context/scope
         b. heap                --> to hold objects

    2. web APIs ( e.g DOM, XHR, Timer , HTML5 APIs )  ==> w3c recommendations

    3. Event-Queue

    4. Event-Loop

--------------------------------------------------------------------    


// summary : 

on event , event-handler always execute async


--------------------------------------------------------------------    




Async APIs
-----------

    => promise API ( es6 )




       e.g


       A.service-module ==> business logic 

       function getService(){
           return promise;
       }

       B.ui-module      ==> rendering logic 

       function render(){

           //...

           //...

            let promise=getService(); 
            with promise , defer actions to future with callbacks

           /... 


       }




--------------------------------------------------    




